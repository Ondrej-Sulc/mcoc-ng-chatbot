import { EmbedBuilder } from "discord.js";
import { getLLMSummary } from "../../services/openRouterService";
import { CommandResult } from "../../types/command";
import {
  EMBED_DESCRIPTION_LIMIT,
  fetchMessages,
  formatMessageHistory,
  parseTimeframe,
  truncateHistory,
} from "./utils";
import { SummarizeParams } from "./types";
import logger from "../../services/loggerService";

export async function handleSummarize(
  params: SummarizeParams
): Promise<CommandResult> {
  const { channel, timeframe, language, customPrompt } = params;
  logger.info(
    { channel: channel.id, timeframe, language, customPrompt },
    "Handling summarize command"
  );

  const afterTime = parseTimeframe(timeframe);
  if (!afterTime) {
    throw new Error(
      `Invalid timeframe format: \`${timeframe}\`. Please use formats like '4h', '2d', 'today', 'yesterday', 'lastweek', or a specific date (e.g., '2023-01-15').`
    );
  }

  const fetchedMessages = await fetchMessages(channel, afterTime);

  if (fetchedMessages.length === 0) {
    return {
      content: `No messages found in ${channel.toString()} within the specified timeframe.`,
    };
  }

  let messageHistory = formatMessageHistory(fetchedMessages);

  if (messageHistory.length === 0) {
    return {
      content: `No non-bot messages found in ${channel.toString()} within the specified timeframe.`,
    };
  }

  const { truncatedHistory, truncationWarning } =
    truncateHistory(messageHistory);
  messageHistory = truncatedHistory;

  const summaryPromptTemplate =
    customPrompt ||
    `You're an alliance mate in an MCOC Discord server. Write a friendly, casual summary of the following conversation, like you're catching up another member. Highlight the main topics, any decisions, and important questions. If there are any clear actions or follow-ups, mention them at the end. Keep it brief, upbeat, and easy to read. Write the summary in ${language}.\n\nHere is the conversation:\n\n`;

  const summary = await getLLMSummary(messageHistory, summaryPromptTemplate);

  if (summary.startsWith("Error:")) {
    throw new Error(`Error generating summary: ${summary}`);
  }

  const summaryChunks: string[] = [];
  for (let i = 0; i < summary.length; i += EMBED_DESCRIPTION_LIMIT) {
    summaryChunks.push(summary.substring(i, i + EMBED_DESCRIPTION_LIMIT));
  }

  const embeds: EmbedBuilder[] = [];
  for (let i = 0; i < summaryChunks.length; i++) {
    const chunk = summaryChunks[i];
    const title = `Summary of ${channel.name}${
      summaryChunks.length > 1 ? ` (continued ${i + 1})` : ""
    }`;
    const embed = new EmbedBuilder()
      .setTitle(title)
      .setDescription(chunk)
      .setColor(0x0099ff)
      .setFooter({ text: `Timeframe: ${timeframe} | Generated by AI` });
    embeds.push(embed);
  }

  return { embeds, content: truncationWarning };
}
